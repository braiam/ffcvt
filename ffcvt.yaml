# easygen data driven file for ffcvt commandline handling
#
# easygen -tf $GOPATH/src/github.com/suntong001/easygen/Test/commandlineFlag ffcvt | sed '/\tAES\t\tstring/{ N; N; N; N; N; s|^.*$|\tEncoding\t// anonymous field to hold encoding values|; }' | gofmt > config.go
#
# Ref:
# ... | sed -n '/ The Options struct /{N; N; N; N; N; N; N; p; q; }' | tee -a structEnc.go

# program name, name for the executable
ProgramName: ffcvt

# package name
# - For standalone program that does not belong to any package, e.g., 
#   https://github.com/suntong001/easygen/blob/7791e4f0e5605543d27da1671a21376cdb9dcf2a/easygen/easygen.go
#   just ignore the first line, the `package` output, and copy the rest
# - If you don't mind using a separated file to handle commandline paramters,
#   then name the package as "main". see the spin-out "TF-minus1.go" file under
#   https://github.com/suntong001/easygen/tree/d1ab0b5fe80ddac57fe9ef51f6ccb3ab998cd5ee
# - If you are using it in a pacakge, look no further than
#   https://github.com/suntong001/easygen/blob/master/easygenapi/config.go
#   which was a direct dump: easygen test/commandlineFlag > easygenapi/config.go
#
PackageName: main

# Name of the structure to hold the values for/from commandline
StructName: Options
# The actual variable that hold the commandline paramter values
StructVar: Opts

Options:

  # Basic fields for encoding
  
  - Name: AES
    Type: string
    Flag: aes
    Value: '""'
    Usage: "audio encoding method set"

  - Name: VES
    Type: string
    Flag: ves
    Value: '""'
    Usage: "video encoding method set"

  - Name: AEA
    Type: string
    Flag: aea
    Value: '""'
    Usage: "audio encoding method append"

  - Name: VEA
    Type: string
    Flag: vea
    Value: '""'
    Usage: "video encoding method append"

  - Name: ABR
    Type: string
    Flag: abr
    Value: '""'
    Usage: "audio bitrate (64k for opus, 256k for mp3)"

  - Name: CRF
    Type: string
    Flag: crf
    Value: '""'
    Usage: "the CRF value: 0-51. Higher CRF gives lower quality\\n\\t (28 for x265, ~ 23 for x264)"

  - Name: SEPARATOR
  
  - Name: Target
    Type: string
    Flag: t
    Value: '"x265-opus"'
    Usage: "target type: x265-opus/x264-mp3"

  # Optional parameters that controls the encoding
  
  - Name: Directory
    Type: string
    Flag: d
    Value: '""'
    Usage: "directory that hold input files"
    
  - Name: File
    Type: string
    Flag: f
    Value: '""'
    Usage: "input file name (either -d or -f must be specified)"
    
  - Name: Suffix
    Type: string
    Flag: suf
    Value: '""'
    Usage: "suffix to the output file names"

  - Name: SEPARATOR

  - Name: AC
    Type: bool
    Flag: ac
    Value: false
    Usage: copy audio codec

  - Name: VC
    Type: bool
    Flag: vc
    Value: false
    Usage: copy video codec

  - Name: AN
    Type: bool
    Flag: an
    Value: false
    Usage: no audio, output video only

  - Name: VN
    Type: bool
    Flag: vn
    Value: false
    Usage: no video, output audio only

  - Name: VSS
    Type: bool
    Flag: vss
    Value: true
    Usage: "video: same size"

  - Name: A2Opus
    Type: bool
    Flag: ato-opus
    Value: false
    Usage: "audio encode to opus, using -abr"

  - Name: V2X265
    Type: bool
    Flag: vto-x265
    Value: false
    Usage: "video video encode to x265, using -crf"

  - Name: SEPARATOR

  - Name: Force
    Type: bool
    Flag: force
    Value: false
    Usage: overwrite any existing none-empty file

  - Name: Debug
    Type: int
    Flag: debug
    Value: 0
    Usage: debugging level
    
  - Name: FFMpeg
    Type: string
    Flag: ffmpeg
    Value: '"ffmpeg"'
    Usage: "ffmpeg program executable name"

# Use the USAGE_SUMMARY in Usage help
UsageSummary: "TRUE"

UsageLead: "\\nUsage:\\n %s [flags] \\n\\nFlags:\\n\\n"

UsageEnd: "\\nThe `ffcvt -f testf.mp4 -debug 1 -force` will invoke\\n\\n  ffmpeg -i testf.mp4 -c:a libopus -b:a 64k -c:v libx265 -x265-params crf=28 -y testf_.mkv\\n\\nTo use `preset`:\\n\\n  cm=medium\\n  ffcvt -f testf.mp4 -debug 1 -force -suf $cm -- -preset $cm\\n\\nWhich will invoke\\n\\n  ffmpeg -i testf.mp4 -c:a libopus -b:a 64k -c:v libx265 -x265-params crf=28 -y -preset medium testf_medium_.mkv\\n\\nHere are the final sizes and the conversion time (in seconds):\\n\\n  2916841  testf.mp4\\n  1807513  testf_.mkv\\n  1743701  testf_veryfast_.mkv   41\\n  2111667  testf_faster_.mkv     44\\n  1793216  testf_fast_.mkv       85\\n  1807513  testf_medium_.mkv    120\\n  1628502  testf_slow_.mkv      366\\n  1521889  testf_slower_.mkv    964\\n  1531154  testf_veryslow_.mkv 1413\\n\\nI.e., if `preset` is not used, the default is `medium`.\\n\\nHere is another set of results, sizes and the conversion time (in minutes):\\n\\n 171019470  testf.avi\\n  55114663  testf_veryfast_.mkv  39.2\\n  57287586  testf_faster_.mkv    51.07\\n  52950504  testf_fast_.mkv     147.11\\n  55641838  testf_medium_.mkv   174.25\\n"

